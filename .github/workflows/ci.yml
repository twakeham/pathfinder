name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment file
      run: |
        cp .env.example .env
        echo "MONGODB_URI=mongodb://admin:password@localhost:27017/pathfinder-test?authSource=admin" >> .env
        echo "JWT_SECRET=test-jwt-secret-for-ci-pipeline-minimum-256-bits" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Validate environment
      run: npm run deploy:validate

    - name: Initialize database
      run: npm run db:init

    - name: Run tests
      run: npm test

    - name: Run CLI tests
      run: |
        npm run db:status
        npm run pathfinder -- test generate --users 3
        npm run pathfinder -- test clean

    - name: Health check
      run: npm run deploy:health || true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "Linting not configured yet"

    - name: Check CLI syntax
      run: node -c scripts/cli.js

  docker:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t pathfinder:latest .

    - name: Test Docker image
      run: |
        docker run --name test-container -d pathfinder:latest
        sleep 10
        docker logs test-container
        docker stop test-container
        docker rm test-container

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for secrets in code
      run: |
        echo "Checking for potential secrets..."
        # Basic check for common secret patterns
        ! grep -r "password.*=" --include="*.js" --include="*.json" src/ || echo "Warning: Found potential hardcoded passwords"
        ! grep -r "api.*key.*=" --include="*.js" --include="*.json" src/ || echo "Warning: Found potential hardcoded API keys"
